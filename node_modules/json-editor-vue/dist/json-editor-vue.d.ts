import type { App } from 'vue-demi';
import { ComponentOptionsMixin } from 'vue-demi';
import { DefineComponent } from 'vue-demi';
import { ExtractPropTypes as ExtractPropTypes_2 } from 'vue-demi';
import { PropType as PropType_2 } from 'vue-demi';
import { PublicProps } from 'vue-demi';
import { RendererElement } from 'vue-demi';
import { RendererNode } from 'vue-demi';
import { VNode as VNode_2 } from 'vue-demi';

declare const _default: SFCWithInstall;
export default _default;

declare const _default_2: DefineComponent<{
    modelValue: object;
    value: object;
} & {
    mode: {
        type: PropType_2<Mode>;
    };
} & {
    mainMenuBar: {
        type: PropType_2<boolean>;
        default: undefined;
    };
    navigationBar: {
        type: PropType_2<boolean>;
        default: undefined;
    };
    statusBar: {
        type: PropType_2<boolean>;
        default: undefined;
    };
    askToFormat: {
        type: PropType_2<boolean>;
        default: undefined;
    };
    readOnly: {
        type: PropType_2<boolean>;
        default: undefined;
    };
    escapeControlCharacters: {
        type: PropType_2<boolean>;
        default: undefined;
    };
    escapeUnicodeCharacters: {
        type: PropType_2<boolean>;
        default: undefined;
    };
    flattenColumns: {
        type: PropType_2<boolean>;
        default: undefined;
    };
}, () => VNode_2<RendererNode, RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    [x: string]: (_payload: any) => boolean;
    'update:mode': (_payload: Mode) => boolean;
}, string, PublicProps, Readonly<ExtractPropTypes_2<{
    modelValue: object;
    value: object;
} & {
    mode: {
        type: PropType_2<Mode>;
    };
} & {
    mainMenuBar: {
        type: PropType_2<boolean>;
        default: undefined;
    };
    navigationBar: {
        type: PropType_2<boolean>;
        default: undefined;
    };
    statusBar: {
        type: PropType_2<boolean>;
        default: undefined;
    };
    askToFormat: {
        type: PropType_2<boolean>;
        default: undefined;
    };
    readOnly: {
        type: PropType_2<boolean>;
        default: undefined;
    };
    escapeControlCharacters: {
        type: PropType_2<boolean>;
        default: undefined;
    };
    escapeUnicodeCharacters: {
        type: PropType_2<boolean>;
        default: undefined;
    };
    flattenColumns: {
        type: PropType_2<boolean>;
        default: undefined;
    };
}>> & {
    [x: `on${Capitalize<string>}`]: ((_payload: any) => any) | undefined;
}, {
    mainMenuBar: boolean;
    navigationBar: boolean;
    statusBar: boolean;
    askToFormat: boolean;
    readOnly: boolean;
    escapeControlCharacters: boolean;
    escapeUnicodeCharacters: boolean;
    flattenColumns: boolean;
}, {}>;

export declare type Mode = 'text' | 'tree' | 'table';

declare type SFCWithInstall = typeof _default_2 & {
    install: (app: App, options?: Record<keyof any, any>) => void;
};

export { }
